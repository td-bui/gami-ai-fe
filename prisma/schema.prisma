generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String        @unique
  password      String
  role          String        @default("user")
  joinDate      DateTime      @default(now())
  xp            Int           @default(0)
  level         Int           @default(1)
  problems      Problem[]     @relation("CreatedBy")
  submissions   Submission[]
  aiAssistance  AiAssistance[]
  userProgress  UserProgress[]
  userBadges    UserBadge[]
  leaderboard   Leaderboard?
}

model Problem {
  id            String         @id @default(cuid())
  title         String
  description   String
  difficulty    String
  tags          String[]
  constraints   String
  examples      String
  starterCode   String        @map("starter_code")
  solutionCode  String        @map("solution_code")
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id])
  createdById   String        @map("created_by")
  createdAt     DateTime      @default(now())
  testCases     TestCase[]
  submissions   Submission[]
  aiAssistance  AiAssistance[]
  userProgress  UserProgress[]
  trackProblems TrackProblem[]
}

model TestCase {
  id            String    @id @default(cuid())
  problemId     String
  input         String
  expectedOutput String   @map("expected_output")
  isPublic      Boolean  @default(false)
  problem       Problem   @relation(fields: [problemId], references: [id])
}

model Submission {
  id            String    @id @default(cuid())
  userId        String
  problemId     String
  code          String    @db.Text
  language      String
  status        String
  runtime       Float
  memory        Float
  submittedAt   DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  problem       Problem   @relation(fields: [problemId], references: [id])
}

model AiAssistance {
  id             String    @id @default(cuid())
  userId         String
  problemId      String
  suggestionType String
  aiResponse     String    @db.Text
  timestamp      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id])
  problem        Problem   @relation(fields: [problemId], references: [id])
}

model UserProgress {
  userId         String
  problemId      String
  solved         Boolean   @default(false)
  attempts       Int       @default(0)
  lastAttempted  DateTime  @updatedAt
  firstSolved    DateTime?
  user           User      @relation(fields: [userId], references: [id])
  problem        Problem   @relation(fields: [problemId], references: [id])

  @@id([userId, problemId])
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  iconUrl     String      @map("icon_url")
  userBadges  UserBadge[]
}

model UserBadge {
  userId    String
  badgeId   String
  earnedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  badge     Badge     @relation(fields: [badgeId], references: [id])

  @@id([userId, badgeId])
}

model Leaderboard {
  userId         String    @id
  rank           Int
  xp             Int
  problemsSolved Int       @map("problems_solved")
  user           User      @relation(fields: [userId], references: [id])
}

model Track {
  id             String         @id @default(cuid())
  title          String
  description    String
  trackProblems  TrackProblem[]
}

model TrackProblem {
  trackId    String
  problemId  String
  track      Track    @relation(fields: [trackId], references: [id])
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@id([trackId, problemId])
}
